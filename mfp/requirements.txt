Microfrontend Development Requirements
--------------------------------------
Inflexible Requirement #1
Zero coupling between child projects
No importing of functions/objects/classes/etc
No shared state
Shared libraries through MF (module federation) is OK

Inflexible Requirement #2
Near-zero coupling between container and child apps
Container shouldn't assume that a child is using a particular framework
Any necessary communication done with callbacks or simple events

Inflexible Requirement #3
CSS from one project shouldn't affect another

Inflexible Requirement #4
Version control (monorepo vs separate) shouldn't have any impact on the overall project
Some people wants to use monorepos
Some people want to keep everything in a separate repo

Inflexible Requirement #5
Container should be able to decide to always use the latest version of a microfrontend or specify a specific version
(1) Container will always use the latest version of a child app (doesn't require a redeploy of container)
(2) Container can specify exactly what version of a child it wants to use (requires a redeploy to change)

Deployment Requirements
-----------------------
Want to deploy each microfrontend independently (including the container)
Location of child app remoteEntry.js files must be known at build time!
Many front-end deployment solutions assume you're deploying a single project-
we need something that can handle multiple different ones
Probably need a CI/CD pipeline of some sort
At present, the remoteEntry.js file name is fixed! Need to think about caching issues

Git/Github Steps
----------------
Create a repo on Github
Create a local git repo, set up .gitignore and remotes
Push code (quick test)
Set up the webpack production config
Set up the CI/CD pipeline (executed through github)

Workflow for Deploying Container
--------------------------------
Whenever code is pushed to the master/main branch and this commit contains a change to the 'container' folder
Change into the container folder
Install dependencies
Create a production build using webpack
Upload the result to AWS S3

Routing Requirements
--------------------
1. Both the Container + Individual SubApps need routing features
2. Sub-apps might need to add in new pages/routes all the time

   This requirement for our mfp would translate in:

   Container: Container's router will be used to decide which microfrontend to show
   /          -> Marketing
   /pricing   -> Marketing
   /auth      -> Auth
   /dashboard -> Dashboard

   Marketing: Marketing's router used to decide which page to show
   /        -> Landing
   /pricing -> Pricing

3. We might need to show two or more microfrontends at the same time

   Container: Container's routing will be used to decide which microfrontend to show
   / -> Marketing + Pricing

4. We want to use off-the-shelf routing solutions
5. We need navigation features for sub-apps in both hosted mode and in isolation
6. If different apps need to communicate information about routing, it should be done in as generic a fashion as possible


Routing libraries decide what content to show on the screen
History -> Object to get and set the current path the user is visiting
Router -> Shows different content based on the current path
Browser History -> Look at the path portion of the url (everything afer the domain) to figure out what the current path is
e.g. http://app.com/marketing/pricing . The router will get /marketing/pricing and decide what to show on the screen.
Hash History -> Look at everything after the '#' in the URL to figure out the current path
e.g. http://app.com#/marketing/pricing. The router will get /marketing/pricing. We are not going to use this in our project.
Memory or Abstract History -> Keep track of the current path in memory.
Typical approach would be to use Browser History inside the Container, and Memory History inside the apps. This will prevent racing problems (big troubles) that might arise if container and other MFE use Browser History.



